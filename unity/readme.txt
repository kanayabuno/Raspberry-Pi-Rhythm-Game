Scripts for Main levelsGM• -	This script is attached to the game object “Wall-floor” in the main game levels (lvl1, lvl2, and lvl3).• -	This script stores the location of all the note objects (capsules) in lists and it calls a function to instantiate them continuously. • -	It stores the values of the global/static variables that are used in other scripts (total scores, combo, current gesture mode, etc.), and reset these variables at the beginning of each level.• -	It instantiates game objects containing the song of each level at the beginning of a level. • -	At the end of each level, it brings up the menu that contains of information of the player’s performance. NodeControl• -	This script is attached to the prefab objects of “RedNote” and “BlueNote”; it controls the behavior of the note objects (capsules). • -	It distinguishes whether it’s attached to a RedNote or a BlueNote based on the object’s position. A BlueNote has an x location of -0.5, while a RedNote has an x location of +0.5.  • -	When the note object is within a certain distance to the player, the scripts tells the game (the GM script) what gesture mode the player needs to be in to destroy this note object through a static variable in GM named currentGesture. It then compares this value to the gesture mode the player is currently in (GM.performedGesture) and decides whether the player is in the correct gesture mode. • -	The script changes the color of the note object to a deeper color.• -	Note objects have a box collider object attached to them, this script calls a function that detects the collision with other game objects’ box colliders. When a collision happens between a node and the ball (SuccessRed), the script recognizes this as the player having the correct location of the ball. When a collision happened between a node and the fail collider, the scripts recognized this as the player not having the correct location. The script then destroys the note object accordingly. • -	The scripts adds scores to the total score (GM.totalScore) and the combo (GM.currentCombo) based on whether the player has the correct gesture and the location. moveTransform• -	This script is attached to the prefab objects of “RedNote” and “BlueNote”; it moves and controls the speed of the note objects. • -	It sets the speed of the capsules corresponding to the current level. sceneSwitch• -	This script is attached to a prefab game object “SceneSwicth” and is used to switch scene/level in the main game and the tutorial.• -	It has functions to restart a level, load the next level, go back to main menu, load either of the two tutorial levels, restart a tutorial level, and load the next tutorial level. PauseMenuControl• -	This script is attached to the game object PauseMenuController. • -	The script has a function that pauses and resumes the game, which brings up a pause menu.• -	When the esc key pressed, it pauses/resumes the game. NextLevelButtonControl• -	This script is attached to the game object NextLvlButtonController. • -	It sets the interactability of the “next level” button on the end of level menu depending on whether or not the player has passed the current level. userGestureText• -	This script is attached to the text object “gesturemode” on the HUD canvas.• -	It reads the variable performedGesture from GM and has the text object show what gesture mode (chop/rotation) the player is currently in. songNameControl • -	This is attached to “songnameText” on the HUD canvas.• -	It displays the information of the song corresponding to the current level.changeballcolor• -	This script is attached to the game object “successRed”.• -	The script checks the value of “performedGesture” from either GM or GM_tutor to determine what gesture the player is currently in, then changes the color of the game object accordingly (blue for chop mode, and red for rotation mode). GestureTextControl • -	This is attached to the text object requiredGesture on the HUD canvas.• -	It displays the required gesture mode to destroy the incoming note. scoreControl• -	This script is attached to the text object displayScore.• -	It reads the totalScore from GM then displays it. ComboControl• -	This script is attached to the game object “displayCombo” in the main game.• -	It reads currentCombo from GM then displays it. EndGameMessageControl • -	This is attached to the text object on the EndofGameCanvas.• -	It reads information containing the player’s performance stored in the GM script, then displays it. songControl • -	This is attached to prefab objects song1, song2, and song3.• -	It pauses the song’s audio when the game is paused.performanceTextControl • -	This is attached to text object “performance” on the HUD canvas. • -	It shows the player whether or not he has successfully performed the correct gesture (in the correct gesture mode) and position the ball (successRed) in the correct location. If not, it shows the player what component(s) (gesture, location, or both) is (are) missing.popUpMessage• -	This is attached to slowMsgText on the HUD canvas. • -	It displays a message that tells the player to perform a faster gesture when the player’s gesture is too slow.================================================================Scripts for the Main Menu sceneStartMenuControl• -	This script is attached to the game object startMenuControl in the main menu scene. • -	It has functions, which are mapped to the buttons on the start menu to load each of the main levels as well as each tutorial level. • -	It keeps track of whether or not the game is ready to be played (whether or not the game is receiving anything from mqtt). • -	It checks if the game has started from the GM script in the main levels. If the game has stared, meaning the player has returned to the start menu scene from another level, the game would not bring up the canvas that contains the initial setup message (startMesssageCanvas)GameSetupMessage• -	This script is attached to the text object “SetupText” on the startMessageCanvas. • -	It reads values from the mqtt script “ZeinaMoveMQTTBlue” and checks whether or not the game is receiving all the necessary values from the MQTT server. ButtonControl• -	This script is attached to the “buttonControl” game object in the main menu scene. • -	This script sets the interactability of the level 2 and level 3 buttons depending on whether or not they have been unlocked. • -	The script also sets the interactability of the “start” button on startMessageCanvas depending on whether or not the game is ready (receiving data from MQTT). ================================================================Scripts for Gesture and Position tutorial GM_tutor• -	This is the equivalent and much more simplified version of the GM script for the tutorial levels. NoteControl_Tutor • -	This is simplified version of NodeControl for the tutorial levels. startLevelMenuTextControl • -	This script is attached to the text object on the startLevelMenu.• -	It displays the instruction for the tutorial level. startTutorialButtonControl • -	This script is attached to the game object “startTutorialButtonControl”, which are mapped to the three buttons on the startLevelMenu canvas. • -	It starts the tutorial and sets the canvas to inactive. difficultyControl • -	This script is attached to the game object difficultyButtonControl, which is mapped to the three buttons on the startLevelMenu. • -	It sets the speed of the note/capsules in the tutorial level according to the chose difficulty, and store that value in GM_tutor.speedMultiplier. MoveTransform_Tutor• -	This script is attached to the prefab objects “BlueNoteTutor” and “RedNoteTutor”; it moves and controls the speed of the note objects. • -	It sets the speed of the capsules corresponding to the chosen difficulty.userGestureText_tutor • -	Equivalent of the userGestureText script for the tutorial. GestureTextControl_tutor • -	The equivalent of GestureTextControl for the tutorial level. EndGameMessageControl_tutor • -	equivalent of EndGameMessageControl for the tutorial level. scoreControl_tutor • -	This is attached to displayScore.• -	It displays how many times the player has successfully destroyed a note by either performing the correct gesture or correctly positioning the ball (successRed). popUpMessage_tutor • -	Equivalent of popUpMessage  for the tutorial level.performanceTextControl_tutor • -	Equivalent of performanceTextControl in the tutorial level. songControl_tutor • -	Equivalent of songControl for the tutorial script. pauseMenuControl_tutor • -	Equivalent of pauseMenuControl for the tutorial level. slowgestureWarning • -	This is attached to text object slowgestureTextmesh. • -	It displays a message that tells the player to perform a faster gesture when the player’s gesture is too slow.faillocationMessage • -	This is attached to the text object “missTextmesh”.• -	It displays the message “wrong location” when the player has failed to hit a note/capsule. References:[1]G. D. HQX, “Unity 5 - How to Make a Guitar Rhythm Game- Part 1,” YouTube,07-Jul-2016. [Online]. Available: https://www.youtube.com/watch?v=kyp3Ks5a6to. [Accessed:29-Oct-2018].[2]U. College, “Unity 101: 5 ways to move Unity3D Objects,” YouTube, 24-Nov-2017.[Online]. Available: https://www.youtube.com/watch?v=tNtOcDryKv4. [Accessed:29-Oct-2018].[3] MrBuFF, “Unity 5 making a simple pause menu,” YouTube, 05-Mar-2016. [Online].Available: https://www.youtube.com/watch?v=PyEmRVRHWL8. [Accessed: 22-Nov-2018].
